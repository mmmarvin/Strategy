/**
 * thread algorithms
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **/
#include "thread_algorithm.h"

#include <algorithm>
#include <future>
#include <thread>
#include "../define.h"
#include "../type.h"
#include "../utility/general_utility.h"
#include "../utility/stl_utility.h"
#include "threadjoiner.h"

namespace gengine2d
{
  /**
   * @name threadedForEach
   * @brief A multithreaded implementation of for_each
   * @param container - container to apply function
   * @param numberOfThreads - a hint to how many threads to run. function may ignore this if it is
   *        larger than the hardware_concurrency()
   * @param func - Function to apply to each element of the container
   */
  template<class ContainerT, class Func>
  void threadedForEach(ContainerT& container, decltype(std::thread::hardware_concurrency()) numberOfThreads, Func&& func)
  {
    divideWorkToThreads(container.begin(), container.end(), numberOfThreads, std::forward<Func>(func));
  }

  /**
   * @name threadedForEach
   * @brief A multithreaded implementation of for_each
   * @param first - starting range to apply function
   * @param last - ending range to apply function
   * @param numberOfThreads - a hint to how many threads to run. function may ignore this if it is
   *        larger than the hardware_concurrency(). must be > 0, or an assert will fire
   * @param func - Function to apply to each element of the container
   */
  template<class InputIteratorT, class Func>
  void threadedForEach(InputIteratorT first, InputIteratorT last, decltype(std::thread::hardware_concurrency()) numberOfThreads, Func func)
  {
    assert(numberOfThreads > 0);
    auto length = stl_utils::distance(first, last);
    if(!length)
      return;

    auto numberOfhardwareThreads = std::thread::hardware_concurrency();
    numberOfhardwareThreads = numberOfhardwareThreads != 0 ? numberOfhardwareThreads : 1;
    numberOfThreads = general_utils::min(numberOfhardwareThreads, numberOfThreads);
    auto blockSize = length / numberOfThreads;

    vector_t<std::thread> threads(numberOfThreads - 1);
    ThreadJoiner<decltype(threads)> threadJoiner(threads);

    auto blockStart = first;
    for(decltype(numberOfThreads) i = 0; i < numberOfThreads - 1; ++i) {
      auto blockEnd = blockStart;
      std::advance(blockEnd, blockSize);
      std::packaged_task<void(void)> task([blockStart, blockEnd, &func]() {
        std::for_each(blockStart, blockEnd, func);
      });
      threads[i] = std::thread(std::move(task));
      blockStart = blockEnd;
    }
    std::for_each(blockStart, last, func);
  }

  template<class InputIteratorT, class Func>
  void threadedForEach(InputIteratorT first, InputIteratorT last, Func&& func)
  {
    auto length = stl_utils::distance(first, last);
    if(!length)
      return;

    auto minPerThread = THREAD_MIN_ITEM_PER_THREAD;
    auto maxThreads = (length + minPerThread - 1) / minPerThread;
    auto hardwareThreads = std::thread::hardware_concurrency();

    auto numberOfThreads = general_utils::min(hardwareThreads != 0 ? hardwareThreads : 2,
                                    maxThreads);
    auto blockSize = length / numberOfThreads;

    vector_t<std::thread> threads(numberOfThreads - 1);
    ThreadJoiner<decltype(threads)> threadJoiner(threads);

    auto blockStart = first;
    for(decltype(numberOfThreads) i = 0, isize = numberOfThreads - 1; i < isize; ++i) {
      auto blockEnd = blockStart;
      std::advance(blockEnd, blockSize);
      std::packaged_task<void()> task([blockStart, blockEnd, &func]() {
        std::for_each(blockStart, blockEnd, func);
      });
      threads[i] = std::thread(std::move(task));
      blockStart = blockEnd;
    }

    std::for_each(blockStart, last, func);
  }
}
